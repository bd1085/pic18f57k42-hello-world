pipeline {
    agent {
        kubernetes {
            label 'pic18f57k42-hello-world'
			defaultContainer 'xc8-mplabx'
            yamlFile '.citd/cloudprovider.yml'
        }
    }

    parameters {
        string( name: 'NOTIFICATION_EMAIL',
                defaultValue: 'dinesh.baria@microchip.com',
                description: "Email to send build failure and fixed notifications.")
    }
	
	environment {
		BITBUCKET_SOURCE_URL = "${GIT_URL}"
		BITBUCKET_SOURCE_CREDENTIAL_ID = ''
		GITHUB_PRODUCTION_DEPLOY_URL ='https://github.com/bd1085'
		GITHUB_PRODUCTION_DEPLOY_CREDENTIAL_ID = 'GitHubToken'
		GITHUB_TEST_DEPLOY_URL = 'https://github.com/mchpTestArea'
		GITHUB_TEST_DEPLOY_CREDENTIAL_ID = 'GitHubTestToken'
		GITHUB_URL = getGitHubRepositoryUrl("${BITBUCKET_SOURCE_URL}","${GITHUB_PRODUCTION_DEPLOY_URL}","${GITHUB_TEST_DEPLOY_URL}")
		GITHUB_CREDENTIAL_ID = getGitHubCredentialId("${GITHUB_PRODUCTION_DEPLOY_CREDENTIAL_ID}","${GITHUB_TEST_DEPLOY_CREDENTIAL_ID}")
		DEPLOY_BRANCH = "${BRANCH_NAME}"
		DEPLOY_EXCLUDE_FILE_LIST = ''
		METADATA_FILE_PATH = '.main-meta/main.json'
		DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git'	
	}

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
				checkout scm
            }
        }
		
		stage('metadata') {
            steps {
				script {
					execute("git clone https://bitbucket.microchip.com/scm/citd/metadata-schema.git")						
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-metadata-validator.git")					
					execute("cd tool-metadata-validator && python metadata-validator.py -data '../${env.METADATA_FILE_PATH}' -schema '../metadata-schema/main-schema.json'")
					
					def jsonObj = readJSON file:"${env.METADATA_FILE_PATH}"		
					def githubObj = getRepositoryInformation(env.GITHUB_URL)
					
					if(githubObj.repoName != jsonObj.content.projectName) {
						execute("echo 'Project name in metadata file does not match with GitHub repository name.' && exit 1")						
					}					
					if(env.TAG_NAME != null) {
						if(env.TAG_NAME != jsonObj.content.version) {
							execute("echo 'Version in metadata file does not match with TAG_NAME.' && exit 1") 
						}
					}					
				}
            }
        }
		
		stage('Pre-build') {
			steps {
				script {					
					MPLABX_PATH= sh (script: 'update-alternatives --list MPLABX_PATH',returnStdout: true).trim()
					COMPILER_PATH= sh (script: 'update-alternatives --list XC8_PATH',returnStdout: true).trim()										
					def pDir = "${MPLABX_PATH}/packs"					
					def ver = COMPILER_PATH.split('/')[4].substring(1)		
					
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-project-generator.git")					
					execute("cd tool-mplabx-c-project-generator && node configGenerator.js sp=../ v8=${ver} packs=${pDir}")	
				}
			}
		}

		stage('Build') {
            steps {
				script {
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-build.git")						
					execute("cd tool-mplabx-c-build && node buildLauncher.js sp=../ rp=./output genMK=true")		 
				}
            }
        }	
		
		stage('Tool-Setup') {
			steps {
				script {
					downloadDeployTool()	
				}
			}			
		}
		
		stage('Github-Deploy-Source') {
			when {
				not { changeRequest () }
				anyOf { 					
					branch 'test-deploy' 
				}
			}
			steps {
				script {
					//Branch deployment
					echo "github-token:${env.GITHUB_CREDENTIAL_ID}"
					withCredentials([usernamePassword(credentialsId: "${env.GITHUB_CREDENTIAL_ID}", usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {					
						execute("python ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py -deploy=true -gpat=${USER_PASS} -dgid=${USER_NAME} -dburl=${env.BITBUCKET_SOURCE_URL} -dgurl=${env.GITHUB_URL} -dbranch=${env.DEPLOY_BRANCH} -dmfd=true")	
					}	
				}
			}
		}
		
        stage('GitHub-Deploy-Release') {
			when {
				not { 
					changeRequest() 
				}
				anyOf {
					tag ''
				}
            }
			steps {
				script {			
					def githubObj = getRepositoryInformation(env.GITHUB_URL)			
						
					//Branch and tag deployment
					withCredentials([usernamePassword(credentialsId: "${env.GITHUB_CREDENTIAL_ID}", usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {					
						execute("python ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py -deploy=true -gpat=${USER_PASS} -dgid=${USER_NAME} -dburl=${env.BITBUCKET_SOURCE_URL} -dgurl=${env.GITHUB_URL} -dbranch=${env.DEPLOY_BRANCH} -dtag=${env.TAG_NAME} -dmfd=true")	
					}
					
                    sendSuccessfulGithubDeploymentEmail()					
				}
			}
        }	
		stage('Portal-Deploy') {
			when {
				expression {false}
				not { 
					changeRequest() 
				}			
				tag ''
			}
			steps {
				script {
					def metadata = readJSON file:".main-meta/main.json"
					
					def version = metadata.content.version
					def project = metadata.content.projectName

					if(version == env.TAG_NAME) {
				
						def cmdArgs = "'{\"repoOwnerName\":\"$env.GITHUB_OWNER\",\"repoName\":\"$project\",\"tagName\":\"$version\"}'"
						cmdArgs = cmdArgs.replaceAll("\"","\\\\\"")						
					
						execute("git clone https://bitbucket.microchip.com/scm/portal/bundles.git")
						execute("cd bundles && chmod 755 ./portal-client-cli-linux")
						execute("git clone https://bitbucket.microchip.com/scm/citd/tool-portal-client-launcher.git")
						execute("cd tool-portal-client-launcher && node portalLauncher.js -app=../bundles/portal-client-cli-linux -cmd=\"uploadGitHub ${cmdArgs}\"")
					} else {
						execute("echo 'Tag name is not equal to metadata content version.' && exit 1")
					}
				}
			}
		}
	}
	

    post {
        failure {			
            script {			
				sendPipelineFailureEmail()
            }
        }
        always {
            archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", allowEmptyArchive: true, fingerprint: true
        }
    }
}

def execute(String cmd) {
	if(isUnix()) {
		sh cmd
	} else {
		bat cmd
	}
}

def getRepositoryInformation (String url) {
	def repoObj = [
		'ownerName':'',
		'repoName':'',
		'projectName':''
	]
	String[] splitURLString = "${url}".split("/")
	repoObj.repoName = splitURLString[splitURLString.size()-1]
	repoObj.repoName = repoObj.repoName.replace(".git","")
	repoObj.ownerName = splitURLString[splitURLString.size()-2]
	repoObj.projectName = repoObj.ownerName
	return repoObj
}

def getGitHubRepositoryUrl(String bbSourceUrl,String productionUrl, String testDeployUrl) {	
    String branchName = "${env.BRANCH_NAME}"	
	def repoObj = getRepositoryInformation("${bbSourceUrl}")
	
    if(branchName == 'master') {
		String githubProductionRepositoryUrl = "${productionUrl}/${repoObj.repoName}"
       return githubProductionRepositoryUrl;
    } else if(branchName == 'test-deploy') {
		String githubTestRepositoryUrl = "${testDeployUrl}/${repoObj.repoName}"
        return githubTestRepositoryUrl;
    } else {
        return null
    }
}

def getGitHubCredentialId (String githubProductionDeployCredential, String githubTestDeployCredential) {
	String branchName = "${env.BRANCH_NAME}"
	echo "branch-->${branchName}"
	if(branchName == 'master') {	
		echo "cred:${githubProductionDeployCredential}"
        return "${githubProductionDeployCredential}" 
    } else if(branchName == 'test-deploy') {
		echo "cred:${githubTestDeployCredential}"
        return "${githubTestDeployCredential}";
    } else {
        return null
    }
}

def downloadDeployTool() {
	execute("git clone ${env.DEPLOY_TOOL_URL}")	
	execute("chmod +x tool-github-deploy/tool-github-deploy/tool-github-deploy.py")  
}

def sendPipelineFailureEmail () {
    if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {		  
        mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    } else {			  
        mail to: "${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    }
}

def sendSuccessfulGithubDeploymentEmail () {
    mail to: "${params.NOTIFICATION_EMAIL}",
    subject: "Successful Deployment: ${currentBuild.fullDisplayName}",
    body: "The changes have been successfully deployed to GitHub. ${env.GITHUB_URL}"
}